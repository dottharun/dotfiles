#!/bin/bash

alias ls="ls --color -G --group-directories-first"
alias ll="ls -la"
alias l="ls -aF"

#watch memory
alias mem="watch -t '\$(which ps_mem) -p \$(pgrep -d, -u \$USER) | tac'"

alias my_ip="ip address | grep -o \"inet 192.*/\" | awk '{ print \$2 }' | tr / ' ' | xargs"

alias firefox_refresh='xdotool search --name "Mozilla Firefox" key "F5"'
alias firefoxDE='/home/tharun/.nix-profile/bin/firefox'

#nvim
n() { nvim "${1:-.}"; }
alias 1="nvim -c 'lua require(\"harpoon\"):list():select(1)'"
alias 2="nvim -c 'lua require(\"harpoon\"):list():select(2)'"
alias 3="nvim -c 'lua require(\"harpoon\"):list():select(3)'"
alias 4="nvim -c 'lua require(\"harpoon\"):list():select(4)'"

# typing test with nvim
alias tt="nvim +DuckyType"

cd() {
    builtin cd "${@:-$HOME}" && ls
}

#tmux sessionizer - for bash
alias cf='tmux-sessionizer'
alias tma='tmux a'

# Edit/Source zsh config
alias ez='nvim ~/.zsh_profile'
alias sz='source ~/.zshrc'

alias eb='nvim ~/.bashrc'
alias sb='source ~/.bashrc'

# Project helpers
alias ..='cd ../'
alias ...='cd ../../'
alias ....='cd ../../../'
alias .....='cd ../../../../'
alias .3='cd ../../../'
alias .4='cd ../../../../'
alias .5='cd ../../../../../'
alias .6='cd ../../../../../../'

#gdb frontend
alias -g gdbf='gf2'

#for running detached processes
function rd() {
    nohup "$@" </dev/null >/dev/null 2>&1 &
    disown
}

# for i3lock sleep
alias sleepi3="i3lock -c 000000"

# bluetooth
alias headphones="until bluetoothctl connect 40:C1:F6:FF:DB:14; do  echo ...  ; sleep 1; done"

# for todoist-cli
# write td with the entire line as input no worries
function addTodoFunc() {
	todoist-cli add --date today "$*";
};

alias td='addTodoFunc'
alias tdl='todoist-cli list'

# obs-studio flatpak installation
alias -g obs='flatpak run com.obsproject.Studio'

# kubernetes
alias k='kubectl'

# meshery
alias m='mesheryctl'
alias msc='m system check'
alias mss='m system start'
alias msr='m system restart'
alias msl='m system login'

# node
alias noden='/usr/local/bin/n'

# clang
cpp_run() {  #runs cpp file in watch mode with -w else once
  local watch_flag=""
  local file_name=""

  while [[ $# -gt 0 ]]; do
    case "$1" in
      -w)
        watch_flag="-w"
        shift
        ;;
      *)
        file_name="$1"
        shift
        ;;
    esac
  done

  if [[ -z "$file_name" ]]; then
    echo "Please provide a file name."
    return 1
  fi

  local output_file="/tmp/$(basename "$file_name" | tr '.' '_')"

  local command="clang++ -o $output_file '$file_name' && $output_file; rm $output_file"

  if [[ -n "$watch_flag" ]]; then
    watchexec "$command"
  else
    eval "$command"
  fi
}
